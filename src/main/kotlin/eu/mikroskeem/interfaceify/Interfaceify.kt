package eu.mikroskeem.interfaceify

import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec
import eu.mikroskeem.interfaceify.asm.InterfaceifyBytecodeSource
import java.io.ByteArrayOutputStream
import java.net.URLClassLoader
import javax.lang.model.element.Modifier

/**
 * @author Mark Vainomaa
 */
class Interfaceify(private val args: Array<String>) {
    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            Interfaceify(args)
        }

        // Static
        // Note: did I miss something or does JavaPoet really require using class references?
        fun generateInterfaceFile(packageName : String, className: String, methods: List<MethodInfo>) : JavaFile {
            // Start building an interface
            val typeSpec = TypeSpec.interfaceBuilder(className)
                    .addModifiers(Modifier.PUBLIC)

            // Build methods
            methods.forEach { (name, accepts, returns) ->
                // Build method base
                val method = MethodSpec.methodBuilder(name)
                        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                        .returns(returns)

                // Add method parameters
                accepts.forEach { (type, paramName) ->
                    method.addParameter(type, paramName)
                }

                // Add method to class
                typeSpec.addMethod(method.build())
            }
            return JavaFile.builder(packageName, typeSpec.build())
                    .addFileComment("Generated by Interfaceify")
                    .build()
        }
    }

    init {
        // TODO: CLI
        val clazz = MethodInfo::class.java

        // Note: InterfaceifyBytecodeSource#from(Class) didn't work with this.
        val ucl = this.javaClass.classLoader as URLClassLoader
        val baos = ByteArrayOutputStream()
        ucl.getResourceAsStream(clazz.name.replace('.', '/') + ".class").use { it.copyTo(baos) }

        val methods = InterfaceifyBytecodeSource().from(baos.toByteArray())
        val javaFile = generateInterfaceFile("eu.mikroskeem.test.interfaceify", "Foo", methods)
        javaFile.writeTo(System.out)
    }
}